We thank the reviewers for insightful comments. Reviewers are overall in favor of the idea, but are concerned that 1) the optimal architecture depends on each problem, and 2) the performance still depends on a problem-specific proposal generation scheme.
 
We now regret the way we presented our work, as these factors exactly demonstrate the strength of our approach. We have presented an approach that unifies  different move making algorithms in one common parallelized framework for MAP inference. In our experiments, three hyper-parameters (alpha, beta, and the frequency of solution sharing) control the architecture. A research can employ a simple grid-search (or more sophisticated Bayesian optimization) over these hyper-parameters to identify the architecture best suited for a given problem. Our latest experiments have confirmed that the grid search can indeed identify the optimal configuration under certain measurement for each problem within 100 search iterations.

We presented three particular architectures in the paper to 1) distinguish the effects of the solution-sharing and the multi-way fusion; and 2) avoid unfair comparisons against existing methods that cannot optimize architectures. However, we agree with the reviewers that the process of finding the architecture (and its unfairness) is an important aspect of the work.

We also agree that our approach still relies on problem-specific proposal generation schemes. However, this is true to any other existing methods. We need problem-specific proposals to solve challenging problems, which cannot be solved by a general-purpose method. This framework can quickly find the optimal hyper-parameters and the architecture for you, given a proposal generation scheme.

We will modify the paper to address all these points and add the hyper-parameter optimization algorithm (less than 10 lines) and its results. We hope to convince R1 and R3 that this paper presents a rather unique holistic view and parameterization of the parallel inference algorithm family. The idea is easy to understand and implement with immediate impact to every Computer Vision researcher or engineer, who currently solves a challenging graphical model inference problem.

We now address the remaining concerns from the reviewers.

The number of threads: Our parallel scheme can be applied to any number of threads or even distributed systems. We also did experiments on 8 threads and had same observations. That is, solution sharing speeds up convergence in most experiments and multi-way fusion can find lower energy in complex problem settings. We will show experiment results on 8 threads in the paper as utilizing 8 threads has a larger impact. A future work would be implementing our parallel scheme on distributed systems.

Incomplete Fig. 3: We only show part of the figure to put speed difference in focus. As the energy is submodular in this problem setting, all the architectures can find the global minimum at the end. We will show the complete graph in the paper.

SF-MF in Fig. 1: As indicated by the red arrows, the last thread of SF-MF on the figure also explores solutions generated by another thread (which is not shown). We will clarify the figure.

Missing reference: We thank R2 and will cite it. But note that their multi-label fusion move is different with our multi-way fusion. They conduct only one TRW inference to fuse all proposals at once and call each iteration a move, whereas we conducts one TRW inference (a move) to fuse only a subset of proposals and repeat the fusion until convergence. This strategy makes our method applicable to problem with more complex energy or larger number of proposals.

Intuition behind Swarm Fusion: We confirm the benefit of solution sharing and multi-way fusion in our experiments. The Swarm Fusion is a general scheme incorporating both ideas. We are not aware of other intuitive ideas.

Lack of exciting results: We use extreme cases to illustrate the idea of solution sharing and multi-way fusion. While in practice, the best parameter setting is unlikely to be any of these extreme cases and should be found by a grid search.
